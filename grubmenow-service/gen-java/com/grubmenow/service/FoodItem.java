/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.grubmenow.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FoodItem implements org.apache.thrift.TBase<FoodItem, FoodItem._Fields>, java.io.Serializable, Cloneable, Comparable<FoodItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FoodItem");

  private static final org.apache.thrift.protocol.TField FOOD_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("foodItemId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FOOD_ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("foodItemName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FOOD_ITEM_IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("foodItemImageUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FOOD_ITEM_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("foodItemDescription", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FoodItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FoodItemTupleSchemeFactory());
  }

  public String foodItemId; // required
  public String foodItemName; // required
  public String foodItemImageUrl; // required
  public String foodItemDescription; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FOOD_ITEM_ID((short)1, "foodItemId"),
    FOOD_ITEM_NAME((short)2, "foodItemName"),
    FOOD_ITEM_IMAGE_URL((short)3, "foodItemImageUrl"),
    FOOD_ITEM_DESCRIPTION((short)4, "foodItemDescription");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FOOD_ITEM_ID
          return FOOD_ITEM_ID;
        case 2: // FOOD_ITEM_NAME
          return FOOD_ITEM_NAME;
        case 3: // FOOD_ITEM_IMAGE_URL
          return FOOD_ITEM_IMAGE_URL;
        case 4: // FOOD_ITEM_DESCRIPTION
          return FOOD_ITEM_DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FOOD_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("foodItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.FOOD_ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("foodItemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.FOOD_ITEM_IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("foodItemImageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.FOOD_ITEM_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("foodItemDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FoodItem.class, metaDataMap);
  }

  public FoodItem() {
  }

  public FoodItem(
    String foodItemId,
    String foodItemName,
    String foodItemImageUrl,
    String foodItemDescription)
  {
    this();
    this.foodItemId = foodItemId;
    this.foodItemName = foodItemName;
    this.foodItemImageUrl = foodItemImageUrl;
    this.foodItemDescription = foodItemDescription;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FoodItem(FoodItem other) {
    if (other.isSetFoodItemId()) {
      this.foodItemId = other.foodItemId;
    }
    if (other.isSetFoodItemName()) {
      this.foodItemName = other.foodItemName;
    }
    if (other.isSetFoodItemImageUrl()) {
      this.foodItemImageUrl = other.foodItemImageUrl;
    }
    if (other.isSetFoodItemDescription()) {
      this.foodItemDescription = other.foodItemDescription;
    }
  }

  public FoodItem deepCopy() {
    return new FoodItem(this);
  }

  @Override
  public void clear() {
    this.foodItemId = null;
    this.foodItemName = null;
    this.foodItemImageUrl = null;
    this.foodItemDescription = null;
  }

  public String getFoodItemId() {
    return this.foodItemId;
  }

  public FoodItem setFoodItemId(String foodItemId) {
    this.foodItemId = foodItemId;
    return this;
  }

  public void unsetFoodItemId() {
    this.foodItemId = null;
  }

  /** Returns true if field foodItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodItemId() {
    return this.foodItemId != null;
  }

  public void setFoodItemIdIsSet(boolean value) {
    if (!value) {
      this.foodItemId = null;
    }
  }

  public String getFoodItemName() {
    return this.foodItemName;
  }

  public FoodItem setFoodItemName(String foodItemName) {
    this.foodItemName = foodItemName;
    return this;
  }

  public void unsetFoodItemName() {
    this.foodItemName = null;
  }

  /** Returns true if field foodItemName is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodItemName() {
    return this.foodItemName != null;
  }

  public void setFoodItemNameIsSet(boolean value) {
    if (!value) {
      this.foodItemName = null;
    }
  }

  public String getFoodItemImageUrl() {
    return this.foodItemImageUrl;
  }

  public FoodItem setFoodItemImageUrl(String foodItemImageUrl) {
    this.foodItemImageUrl = foodItemImageUrl;
    return this;
  }

  public void unsetFoodItemImageUrl() {
    this.foodItemImageUrl = null;
  }

  /** Returns true if field foodItemImageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodItemImageUrl() {
    return this.foodItemImageUrl != null;
  }

  public void setFoodItemImageUrlIsSet(boolean value) {
    if (!value) {
      this.foodItemImageUrl = null;
    }
  }

  public String getFoodItemDescription() {
    return this.foodItemDescription;
  }

  public FoodItem setFoodItemDescription(String foodItemDescription) {
    this.foodItemDescription = foodItemDescription;
    return this;
  }

  public void unsetFoodItemDescription() {
    this.foodItemDescription = null;
  }

  /** Returns true if field foodItemDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodItemDescription() {
    return this.foodItemDescription != null;
  }

  public void setFoodItemDescriptionIsSet(boolean value) {
    if (!value) {
      this.foodItemDescription = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FOOD_ITEM_ID:
      if (value == null) {
        unsetFoodItemId();
      } else {
        setFoodItemId((String)value);
      }
      break;

    case FOOD_ITEM_NAME:
      if (value == null) {
        unsetFoodItemName();
      } else {
        setFoodItemName((String)value);
      }
      break;

    case FOOD_ITEM_IMAGE_URL:
      if (value == null) {
        unsetFoodItemImageUrl();
      } else {
        setFoodItemImageUrl((String)value);
      }
      break;

    case FOOD_ITEM_DESCRIPTION:
      if (value == null) {
        unsetFoodItemDescription();
      } else {
        setFoodItemDescription((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FOOD_ITEM_ID:
      return getFoodItemId();

    case FOOD_ITEM_NAME:
      return getFoodItemName();

    case FOOD_ITEM_IMAGE_URL:
      return getFoodItemImageUrl();

    case FOOD_ITEM_DESCRIPTION:
      return getFoodItemDescription();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FOOD_ITEM_ID:
      return isSetFoodItemId();
    case FOOD_ITEM_NAME:
      return isSetFoodItemName();
    case FOOD_ITEM_IMAGE_URL:
      return isSetFoodItemImageUrl();
    case FOOD_ITEM_DESCRIPTION:
      return isSetFoodItemDescription();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FoodItem)
      return this.equals((FoodItem)that);
    return false;
  }

  public boolean equals(FoodItem that) {
    if (that == null)
      return false;

    boolean this_present_foodItemId = true && this.isSetFoodItemId();
    boolean that_present_foodItemId = true && that.isSetFoodItemId();
    if (this_present_foodItemId || that_present_foodItemId) {
      if (!(this_present_foodItemId && that_present_foodItemId))
        return false;
      if (!this.foodItemId.equals(that.foodItemId))
        return false;
    }

    boolean this_present_foodItemName = true && this.isSetFoodItemName();
    boolean that_present_foodItemName = true && that.isSetFoodItemName();
    if (this_present_foodItemName || that_present_foodItemName) {
      if (!(this_present_foodItemName && that_present_foodItemName))
        return false;
      if (!this.foodItemName.equals(that.foodItemName))
        return false;
    }

    boolean this_present_foodItemImageUrl = true && this.isSetFoodItemImageUrl();
    boolean that_present_foodItemImageUrl = true && that.isSetFoodItemImageUrl();
    if (this_present_foodItemImageUrl || that_present_foodItemImageUrl) {
      if (!(this_present_foodItemImageUrl && that_present_foodItemImageUrl))
        return false;
      if (!this.foodItemImageUrl.equals(that.foodItemImageUrl))
        return false;
    }

    boolean this_present_foodItemDescription = true && this.isSetFoodItemDescription();
    boolean that_present_foodItemDescription = true && that.isSetFoodItemDescription();
    if (this_present_foodItemDescription || that_present_foodItemDescription) {
      if (!(this_present_foodItemDescription && that_present_foodItemDescription))
        return false;
      if (!this.foodItemDescription.equals(that.foodItemDescription))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FoodItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFoodItemId()).compareTo(other.isSetFoodItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodItemId, other.foodItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoodItemName()).compareTo(other.isSetFoodItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodItemName, other.foodItemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoodItemImageUrl()).compareTo(other.isSetFoodItemImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodItemImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodItemImageUrl, other.foodItemImageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoodItemDescription()).compareTo(other.isSetFoodItemDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodItemDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodItemDescription, other.foodItemDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FoodItem(");
    boolean first = true;

    sb.append("foodItemId:");
    if (this.foodItemId == null) {
      sb.append("null");
    } else {
      sb.append(this.foodItemId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodItemName:");
    if (this.foodItemName == null) {
      sb.append("null");
    } else {
      sb.append(this.foodItemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodItemImageUrl:");
    if (this.foodItemImageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.foodItemImageUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodItemDescription:");
    if (this.foodItemDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.foodItemDescription);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FoodItemStandardSchemeFactory implements SchemeFactory {
    public FoodItemStandardScheme getScheme() {
      return new FoodItemStandardScheme();
    }
  }

  private static class FoodItemStandardScheme extends StandardScheme<FoodItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FoodItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FOOD_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foodItemId = iprot.readString();
              struct.setFoodItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FOOD_ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foodItemName = iprot.readString();
              struct.setFoodItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOOD_ITEM_IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foodItemImageUrl = iprot.readString();
              struct.setFoodItemImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOOD_ITEM_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foodItemDescription = iprot.readString();
              struct.setFoodItemDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FoodItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.foodItemId != null) {
        oprot.writeFieldBegin(FOOD_ITEM_ID_FIELD_DESC);
        oprot.writeString(struct.foodItemId);
        oprot.writeFieldEnd();
      }
      if (struct.foodItemName != null) {
        oprot.writeFieldBegin(FOOD_ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.foodItemName);
        oprot.writeFieldEnd();
      }
      if (struct.foodItemImageUrl != null) {
        oprot.writeFieldBegin(FOOD_ITEM_IMAGE_URL_FIELD_DESC);
        oprot.writeString(struct.foodItemImageUrl);
        oprot.writeFieldEnd();
      }
      if (struct.foodItemDescription != null) {
        oprot.writeFieldBegin(FOOD_ITEM_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.foodItemDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FoodItemTupleSchemeFactory implements SchemeFactory {
    public FoodItemTupleScheme getScheme() {
      return new FoodItemTupleScheme();
    }
  }

  private static class FoodItemTupleScheme extends TupleScheme<FoodItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FoodItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFoodItemId()) {
        optionals.set(0);
      }
      if (struct.isSetFoodItemName()) {
        optionals.set(1);
      }
      if (struct.isSetFoodItemImageUrl()) {
        optionals.set(2);
      }
      if (struct.isSetFoodItemDescription()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFoodItemId()) {
        oprot.writeString(struct.foodItemId);
      }
      if (struct.isSetFoodItemName()) {
        oprot.writeString(struct.foodItemName);
      }
      if (struct.isSetFoodItemImageUrl()) {
        oprot.writeString(struct.foodItemImageUrl);
      }
      if (struct.isSetFoodItemDescription()) {
        oprot.writeString(struct.foodItemDescription);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FoodItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.foodItemId = iprot.readString();
        struct.setFoodItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.foodItemName = iprot.readString();
        struct.setFoodItemNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.foodItemImageUrl = iprot.readString();
        struct.setFoodItemImageUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.foodItemDescription = iprot.readString();
        struct.setFoodItemDescriptionIsSet(true);
      }
    }
  }

}

